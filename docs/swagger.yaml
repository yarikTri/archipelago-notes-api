basePath: /
definitions:
  http.CreateAndLinkTagRequest:
    properties:
      name:
        type: string
      note_id:
        type: string
    type: object
  http.CreateDirRequest:
    properties:
      name:
        type: string
      parent_dir_id:
        type: integer
    type: object
  http.CreateNoteRequest:
    properties:
      automerge_url:
        type: string
      dir_id:
        type: integer
      title:
        type: string
    type: object
  http.DeleteTagRequest:
    properties:
      tag_id:
        type: string
    type: object
  http.LinkTagsRequest:
    properties:
      tag1_id:
        type: string
      tag2_id:
        type: string
    type: object
  http.ListNotesResponse:
    properties:
      notes:
        items:
          $ref: '#/definitions/models.NoteTransfer'
        type: array
    type: object
  http.SearchUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.UserTransfer'
        type: array
    type: object
  http.SetAccessRequest:
    properties:
      access:
        type: string
      with_invitation:
        type: boolean
    type: object
  http.UnlinkTagRequest:
    properties:
      note_id:
        type: string
      tag_id:
        type: string
    type: object
  http.UpdateDirRequest:
    properties:
      id:
        type: integer
      name:
        type: string
      subpath:
        type: string
    type: object
  http.UpdateNoteRequest:
    properties:
      automerge_url:
        type: string
      default_access:
        type: string
      dir_id:
        type: integer
      id:
        type: string
      title:
        type: string
    type: object
  http.UpdateTagRequest:
    properties:
      name:
        type: string
      tag_id:
        type: string
    type: object
  http.suggestTagsRequest:
    properties:
      tags_num:
        type: integer
      text:
        type: string
    required:
    - text
    type: object
  http.suggestTagsResponse:
    properties:
      tags:
        items:
          type: string
        type: array
    type: object
  models.Dir:
    properties:
      id:
        type: integer
      name:
        type: string
      subpath:
        type: string
    type: object
  models.DirTree:
    properties:
      children:
        items:
          $ref: '#/definitions/models.DirTree'
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
  models.NoteTransfer:
    properties:
      allowed_methods:
        items:
          type: string
        type: array
      automerge_url:
        type: string
      creator_id:
        type: string
      default_access:
        type: string
      dir_id:
        type: integer
      id:
        type: string
      title:
        type: string
    type: object
  models.Tag:
    properties:
      name:
        type: string
      tag_id:
        type: string
      user_id:
        type: string
    type: object
  models.UserTransfer:
    properties:
      email:
        type: string
      email_confirmed:
        type: boolean
      id:
        type: string
      name:
        type: string
      root_dir_id:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: yarik1448kuzmin@gmail.com
    name: Yaroslav Kuzmin
  description: Notes API
  title: Archipelago Notes API
  version: 1.0.1
paths:
  /api/dirs:
    post:
      consumes:
      - application/json
      description: Create dir
      parameters:
      - description: Dir info
        in: body
        name: dirInfo
        required: true
        schema:
          $ref: '#/definitions/http.CreateDirRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Dir created
          schema:
            $ref: '#/definitions/models.Dir'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Create dir
      tags:
      - Dirs
  /api/dirs/{dirID}:
    delete:
      description: Delete dir by ID
      parameters:
      - description: Dir ID
        in: path
        name: dirID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dir deleted
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Delete dir
      tags:
      - Dirs
    get:
      description: Get dir by ID
      parameters:
      - description: Dir ID
        in: path
        name: dirID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dir
          schema:
            $ref: '#/definitions/models.Dir'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Get dir
      tags:
      - Dirs
    post:
      consumes:
      - application/json
      description: Update dir by ID
      parameters:
      - description: Dir ID
        in: path
        name: dirID
        required: true
        type: integer
      - description: Dir info
        in: body
        name: dirInfo
        required: true
        schema:
          $ref: '#/definitions/http.UpdateDirRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated dir
          schema:
            $ref: '#/definitions/models.Dir'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Update dir
      tags:
      - Dirs
  /api/dirs/{dirID}/tree:
    get:
      description: Get subtree of dir with id {dirID}
      produces:
      - application/json
      responses:
        "200":
          description: Dir tree
          schema:
            $ref: '#/definitions/models.DirTree'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Get dir Tree
      tags:
      - Dirs
  /api/notes:
    get:
      consumes:
      - application/json
      description: Get all notes user has access to
      produces:
      - application/json
      responses:
        "200":
          description: Notes
          schema:
            $ref: '#/definitions/http.ListNotesResponse'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: List notes
      tags:
      - Notes
    post:
      consumes:
      - application/json
      description: Create note
      parameters:
      - description: Note info
        in: body
        name: noteInfo
        required: true
        schema:
          $ref: '#/definitions/http.CreateNoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Note created
          schema:
            $ref: '#/definitions/models.NoteTransfer'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Create note
      tags:
      - Notes
  /api/notes/{noteID}:
    delete:
      description: Delete note by ID
      parameters:
      - description: Note ID
        in: path
        name: noteID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Note deleted
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Delete note
      tags:
      - Notes
    get:
      description: Get note by ID
      parameters:
      - description: Note ID
        in: path
        name: noteID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Note
          schema:
            $ref: '#/definitions/models.NoteTransfer'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Get note
      tags:
      - Notes
    post:
      consumes:
      - application/json
      description: Update note by ID
      parameters:
      - description: Note ID
        in: path
        name: noteID
        required: true
        type: string
      - description: Note info
        in: body
        name: noteInfo
        required: true
        schema:
          $ref: '#/definitions/http.UpdateNoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated note
          schema:
            $ref: '#/definitions/models.NoteTransfer'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Update note
      tags:
      - Notes
  /api/notes/{noteID}/access/{userID}:
    post:
      consumes:
      - application/json
      description: Set access to note to user
      parameters:
      - description: Note ID
        in: path
        name: noteID
        required: true
        type: string
      - description: User to set access ID
        in: path
        name: userID
        required: true
        type: string
      - description: Note info
        in: body
        name: access
        required: true
        schema:
          $ref: '#/definitions/http.SetAccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Note deleted
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Set Access
      tags:
      - Notes
  /api/tags/{tag_id}/link/{note_id}:
    post:
      consumes:
      - application/json
      description: Link an existing tag to a note
      parameters:
      - description: Note ID
        in: path
        name: note_id
        required: true
        type: string
      - description: Tag ID
        in: path
        name: tag_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Tag linked
        "400":
          description: Incorrect input
          schema: {}
        "403":
          description: Access denied
          schema: {}
        "404":
          description: Tag or note not found
          schema: {}
        "409":
          description: Tag already linked
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Link existing tag to note
      tags:
      - Tags
  /api/tags/{tagID}/closest:
    get:
      description: Get a list of tags closest to the given tag
      parameters:
      - description: Tag ID
        in: path
        name: tagID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Closest tags
          schema:
            items:
              $ref: '#/definitions/models.Tag'
            type: array
        "400":
          description: Incorrect input
          schema: {}
        "404":
          description: Tag not found
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: List closest tags
      tags:
      - Tags
  /api/tags/{tagID}/linked:
    get:
      description: Get all tags linked to a specific tag
      parameters:
      - description: Tag ID
        in: path
        name: tagID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Linked tags
          schema:
            items:
              $ref: '#/definitions/models.Tag'
            type: array
        "400":
          description: Incorrect input
          schema: {}
        "404":
          description: Tag not found
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Get linked tags
      tags:
      - Tags
  /api/tags/{tagID}/notes:
    get:
      description: Get all notes linked to a specific tag
      parameters:
      - description: Tag ID
        in: path
        name: tagID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notes
          schema:
            items:
              $ref: '#/definitions/models.NoteTransfer'
            type: array
        "400":
          description: Incorrect input
          schema: {}
        "404":
          description: Tag not found
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Get notes by tag
      tags:
      - Tags
  /api/tags/create:
    post:
      consumes:
      - application/json
      description: Create a new tag and link it to a note, or link existing tag if
        it exists
      parameters:
      - description: Tag info
        in: body
        name: tagInfo
        required: true
        schema:
          $ref: '#/definitions/http.CreateAndLinkTagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Tag created and linked
          schema:
            $ref: '#/definitions/models.Tag'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Create and link tag to note
      tags:
      - Tags
  /api/tags/delete:
    post:
      consumes:
      - application/json
      description: Delete a tag and all its relations (notes and linked tags)
      parameters:
      - description: Tag ID
        in: body
        name: tagInfo
        required: true
        schema:
          $ref: '#/definitions/http.DeleteTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tag deleted
        "400":
          description: Incorrect input
          schema: {}
        "404":
          description: Tag not found
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Delete tag
      tags:
      - Tags
  /api/tags/link:
    post:
      consumes:
      - application/json
      description: Create a link between two tags
      parameters:
      - description: Tag IDs
        in: body
        name: tagInfo
        required: true
        schema:
          $ref: '#/definitions/http.LinkTagsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tags linked
        "400":
          description: Incorrect input
          schema: {}
        "404":
          description: Tag not found
          schema: {}
        "409":
          description: Tags already linked
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Link two tags together
      tags:
      - Tags
  /api/tags/note/{noteID}:
    get:
      description: Get all tags linked to a specific note
      parameters:
      - description: Note ID
        in: path
        name: noteID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tags
          schema:
            items:
              $ref: '#/definitions/models.Tag'
            type: array
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Get tags by note
      tags:
      - Tags
  /api/tags/suggest:
    post:
      consumes:
      - application/json
      description: Generate tag suggestions using LLM
      parameters:
      - description: Text to generate tags for
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.suggestTagsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.suggestTagsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Suggest tags for given text
      tags:
      - Tags
  /api/tags/unlink:
    post:
      consumes:
      - application/json
      description: Remove the link between a tag and a note, delete tag if it has
        no more links
      parameters:
      - description: Tag and note IDs
        in: body
        name: tagInfo
        required: true
        schema:
          $ref: '#/definitions/http.UnlinkTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tag unlinked
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Unlink tag from note
      tags:
      - Tags
  /api/tags/unlink-tags:
    post:
      consumes:
      - application/json
      description: Remove the link between two tags
      parameters:
      - description: Tag IDs
        in: body
        name: tagInfo
        required: true
        schema:
          $ref: '#/definitions/http.LinkTagsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tags unlinked
        "400":
          description: Incorrect input
          schema: {}
        "404":
          description: Tag not found
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Unlink two tags
      tags:
      - Tags
  /api/tags/update:
    put:
      consumes:
      - application/json
      description: Update the name of an existing tag
      parameters:
      - description: Tag update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated tag
          schema:
            $ref: '#/definitions/models.Tag'
        "400":
          description: Incorrect input
          schema: {}
        "403":
          description: Access denied
          schema: {}
        "404":
          description: Tag not found
          schema: {}
        "409":
          description: Tag name conflict
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Update tag
      tags:
      - Tags
  /api/users/:
    get:
      description: Search users by query
      parameters:
      - description: Query of search
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Found users
          schema:
            $ref: '#/definitions/http.SearchUsersResponse'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Search users
      tags:
      - Users
  /api/users/{userID}:
    get:
      description: Get user by user id
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/models.UserTransfer'
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Get user
      tags:
      - Users
  /api/users/{userID}/confirm_email:
    post:
      description: Confirm user's email
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      responses:
        "200":
          description: Email confirmed
          schema:
            type: string
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Confirm email
      tags:
      - Users
  /api/users/{userID}/root_dir/{rootDirID}:
    post:
      description: Set root dir id by user id
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Root dir ID
        in: path
        name: rootDirID
        required: true
        type: integer
      responses:
        "200":
          description: Root dir setted
          schema:
            type: string
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Set root dir id
      tags:
      - Users
  /api/users/{userID}/send_email_confirmation:
    post:
      description: Send user's email confirmation
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      responses:
        "200":
          description: Mail sent
          schema:
            type: string
        "400":
          description: Incorrect input
          schema: {}
        "500":
          description: Server error
          schema: {}
      summary: Send email confirmation
      tags:
      - Users
schemes:
- https
- http
swagger: "2.0"
